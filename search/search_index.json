{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SmartPlant Waterer Documentation","text":""},{"location":"#hello-plant-enthusiast","title":"Hello, Plant Enthusiast! \ud83c\udf3f","text":"<p>Welcome to the world of hassle-free plant care with the SmartPlant Waterer! We're thrilled that you've chosen our smart watering solution to nurture your green companions.</p> <p>Whether you're a seasoned plant parent or just starting your botanical journey, this documentation is designed to make your experience seamless and enjoyable. Let's dive in and discover how the SmartPlant Waterer can transform the way you care for your plants.</p>"},{"location":"#whats-inside","title":"What's Inside?","text":"<ul> <li>Setup: Unbox, position, and get ready for a stress-free watering routine.</li> <li>Customization: Tailor the watering settings to meet the unique needs of your plants.</li> <li>Maintenance: Learn how to keep your SmartPlant Waterer in top-notch condition.</li> <li>Troubleshooting: Quick fixes for common hiccups to ensure your plants stay happy.</li> </ul>"},{"location":"#lets-get-started","title":"Let's Get Started!","text":"<p>Click on the sections in the Table of Contents to explore the features and functionality of your SmartPlant Waterer. If you ever have questions or need assistance, remember that we're just a message away.</p> <p>Happy watering and here's to a garden full of thriving, happy plants! \ud83c\udf3a\ud83c\udf31</p>"},{"location":"parts%26assembly/","title":"Parts &amp; Assembly","text":""},{"location":"parts%26assembly/#bill-of-materials","title":"Bill of materials","text":""},{"location":"parts%26assembly/#raspberry-pi-pico-w-rp2040-wlan","title":"Raspberry Pi Pico W, RP2040 + WLAN","text":"<p>Introduced by Raspberry Pi in January 2021, is the first Microcontroller in RAspberry Pi Family, powered by RP2040 MCU, with multiple PWM-capable I/O ports, I2C, SPI, ADC.</p> <p></p> <p>Raspberry Pi Pico is a flexible, low cost microcontroller development board from the folks at Raspberry Pi, based on their very own chip - the RP2040. It's easily programmable over USB with C/C++ or MicroPython, and ideal for using in all sorts of physical computing projects, devices and inventions - we're so excited to see what you make with it!</p> <p>We've called our Pico-sized add-ons packs, as they're designed to attach to the back of your Pico as if it were wearing a very stylish back pack (or a miniature jet pack, if you prefer). We've also got Pico bases (larger add-on boards with a space to mount your Pico on top) and some other boards that let you do interesting hackerly things like using multiple packs at once - click here to view them all!</p> <p>Raspberry Pi Pico W, RP2040 + WLAN Documentation</p>"},{"location":"parts%26assembly/#pimoroni-pim543-display","title":"Pimoroni PIM543 Display","text":"<p>Pico Display lets you turn a Pico into a compact user interface device for a bigger project, capable of giving instructions, displaying readouts and even incorporating elaborate nested menus. If you'd rather use your Pico as a standalone device you could make a little rotating slideshow of images, display beautiful graphs from sensor data or build your own Tamagotchi or matchbox sized text adventure game.</p> <p></p> <p>Pico Display Pack communicates with the LCD display via SPI on pins LCD_CS, LCD_DC, LCD_SCLK, and LCD_MOSI. We also PWM the BL_EN pin (with gamma correction) for full, linear, backlight control. LCD_RESET is tied to the RUN pin on Pico so the LCD will be fully reset whenever Pico is.</p> <p>The four switches are wired up as SW_A, SW_B, SW_X, and SW_Y.</p> <p>There is also an onboard RGB LED (ideal to use an activity indicator!) which is also PWMed (with gamma correction) on pins LED_R, LED_G, and LED_B. If you want to use the LED pins for something else there are three cuttable traces on the underside of the board.</p> <p>Power is supplied through 3V3 meaning that you can use Pico Display Pack both on USB power and from external supplies ( from 1.8V to 5.5V) making it ideal for battery powered projects.</p> <p></p> <p>1.14\u201d 240x135 pixel IPS LCD screen 4 x tactile buttons RGB LED Pre-soldered female headers for attaching to Pico Compatible with Raspberry Pi Pico/Pico W. Fully assembled No soldering required (as long as your Pico has header pins attached). Dimensions: approx 53mm x 25mm x 9mm (L x W x H) (dimensional drawing) Screen usable area: approx 25mm x 15mm (L x W) Schematic C/C++ and MicroPython libraries</p> <p>pico_display_pack_full_schematic.pdf</p>"},{"location":"parts%26assembly/#capacitive-soil-moisture-sensor-v12","title":"Capacitive Soil Moisture Sensor v1.2","text":"<p>The \"Capacitive Soil Moisture Sensor v1.2\" is designed for measuring the moisture content in soil, using capacitive sensing rather than resistive sensing which makes it less prone to corrosion. It operates on 3.3V to 5V, providing an analog output proportional to the moisture level, and is compatible with microcontroller platforms like Arduino.</p> <p></p>"},{"location":"parts%26assembly/#5v-1-channel-relay-module","title":"5V 1 Channel Relay Module","text":"<p>The \"5V 1 Channel Relay Module\" is an electronic switch that allows a low-power signal to control a higher power circuit. Operating at 5V, it features a single channel, ideal for interfacing with microcontrollers like Arduino for various automation tasks. The module includes an onboard LED indicator for relay operation and provides both normally open and normally closed output options for versatile application in control systems.</p> <p></p>"},{"location":"parts%26assembly/#18650-battery-battery-holder","title":"18650 Battery &amp; Battery Holder","text":"<p>A simple battery holder was used.</p> <p></p>"},{"location":"parts%26assembly/#water-pump","title":"Water Pump","text":"<p>Simple water pump was used.</p> <p></p>"},{"location":"parts%26assembly/#assembly","title":"Assembly","text":"<p>To assembly follow the schematics below.</p>"},{"location":"parts%26assembly/#schematic","title":"Schematic","text":""},{"location":"parts%26assembly/#code","title":"Code","text":"<pre><code>#the whole code can be found in GitHub repo\n</code></pre> <p>coord system </p>"},{"location":"projectchart/","title":"Plants waterer project chart","text":"<p>This project is a time-limited endeavor to create a UNIQUE plants waterer product. It was created by a 2 person team.</p>"},{"location":"projectchart/#project-description-and-scope","title":"Project Description and Scope","text":"<ol> <li>Initial requirements gathering</li> <li>Solution scoping and pricing</li> <li>Detailed solution design</li> <li>Solution implementation</li> </ol>"},{"location":"projectchart/#business-case","title":"Business case","text":"<p>As a plant enthusiast, I want to:</p> <ul> <li>have a hassle-free plant watering.</li> <li>fill one bigger water tank that should last for a few weeks,   depending on the plant water consumption, and set up the watering device once.</li> <li>be able to set up the watering schedule based on my plant's needs. Using display and buttons.</li> <li>receive a mail notification when the water tank is nearly empty.</li> </ul>"},{"location":"projectchart/#project-objectives","title":"Project objectives","text":"<ul> <li> <p>Automated Watering System: Develop an automated plant watering system that can efficiently and accurately deliver   water   to plants based on their specific needs.</p> </li> <li> <p>Sensor Integration: Integrate soil moisture sensors to accurately measure the moisture levels in the soil and provide   real-time data for effective watering decisions.</p> </li> <li> <p>Customizable Watering Parameters: Create a user-friendly interface that allows users to customize watering parameters   such as frequency, duration, and volume to cater to the specific requirements of different plant species.</p> </li> <li> <p>Energy-Efficient Design: Design the system with energy efficiency in mind, incorporating features such as low-power   components, sleep modes, and efficient scheduling to minimize power consumption.</p> </li> <li> <p>Compatibility with Various Plant Types: Ensure the system is adaptable to different types of plants by considering   variations in soil types, sunlight exposure, and individual plant water requirements.</p> </li> <li> <p>Remote Monitoring and Control: Implement a remote monitoring and control feature, allowing users to check the system   status, receive alerts, and adjust watering settings through a mobile app or web interface.</p> </li> <li> <p>Water Conservation: Prioritize water conservation by implementing features such as rainwater harvesting integration,   smart weather prediction, and the ability to adjust watering schedules based on environmental conditions.</p> </li> <li> <p>Reliability and Durability: Design a robust and durable system capable of withstanding outdoor conditions, including   resistance to water exposure, temperature variations, and other environmental factors.</p> </li> <li> <p>User Education and Support: Provide comprehensive user documentation and support to ensure that users can easily set   up,   operate, and troubleshoot the system effectively.</p> </li> <li> <p>Cost-Effective Solution: Strive to create a cost-effective solution by optimizing the use of materials and components   without compromising on the system's performance and reliability.</p> </li> <li> <p>Data Logging and Analysis: Implement a data logging feature to record historical soil moisture data, enabling users to   analyze plant health trends over time and make informed decisions about watering adjustments.</p> </li> <li> <p>Scalability: Design the system with scalability in mind, allowing users to expand the system to accommodate a larger   number of plants or additional features in the future.</p> </li> <li> <p>Integration with Smart Home Ecosystems: Explore possibilities for integrating the plant watering system with popular   smart home ecosystems such as Google Home or Amazon Alexa for seamless home automation.</p> </li> <li> <p>Feedback Mechanism: Implement a feedback mechanism that allows users to receive notifications or alerts when the   system   encounters issues, ensuring timely intervention and maintenance.</p> </li> <li> <p>Aesthetic Integration: Consider the aesthetic aspects of the design to ensure that the plant waterer is visually   appealing and can seamlessly blend into different garden or indoor environments.</p> </li> </ul>"},{"location":"projectchart/#preassigned-resources","title":"Preassigned resources","text":"<p>The role of manager, hardware, electrical, mechanical, software engineer was done by Rojberr.</p> <p>Documentation will be done by Rojberr.</p> <p>The Project will be reviewed by University professor.</p>"},{"location":"projectchart/#stakeholders","title":"Stakeholders","text":"<p>Builder - Rojberr Reviewer - University professor</p> <p>No other stakeholders were identified so far (state 04.12.2023).</p>"},{"location":"projectchart/#known-requirements","title":"Known requirements","text":""},{"location":"projectchart/#description-of-deliverables","title":"Description of Deliverables","text":""},{"location":"projectchart/#assumptions","title":"Assumptions","text":"<ul> <li>We assume that the plant waterer system is designed for a specific range of plant types: indoor houseplants, of small   and medium sizes.</li> <li>We assume that the system is designed to meet the basic watering requirements of the chosen plants.</li> <li>The frequency of and quantity of 5 liters of water is enough for the plants to survive for a few weeks.</li> <li>The system is designed to be used in a home environment, with access to a power source and WiFi connectivity.</li> <li>We assume a minimal maintenance requirement for the plant waterer.</li> <li>We assume that the system has components that can be easily replaced, the water can be easily refilled and cleaned.</li> <li>We assume that users will interact with the plant waterer through a user-friendly interface.</li> <li>We assume that the system has limitations related to materials and exposure to rain, water, sunlight, and other.</li> </ul>"},{"location":"projectchart/#constraints","title":"Constraints","text":"<p>Project started on 04-12-2023. \ud83d\udcc5 The end date of project is set to 27-01-2024. \ud83d\uddd3\ufe0f</p>"},{"location":"projectchart/#project-risks","title":"Project Risks","text":"<p>Sensor Accuracy:</p> <p>Risk: Soil moisture sensors may provide inaccurate readings, leading to overwatering or underwatering. Mitigation: Conduct extensive testing and calibration of sensors under various soil conditions. Implement fail-safes to prevent extreme watering based solely on sensor data. Plant Variability:</p> <p>Risk: Different plant species have varied water requirements, and the system may struggle to cater to the specific needs of each plant. Mitigation: Implement a customizable interface for users to input plant types and adjust watering parameters. Provide guidance on optimal settings for common plant varieties. Seasonal Changes:</p> <p>Risk: Seasonal variations may impact plant water requirements, and the system may need adjustments to adapt. Mitigation: Incorporate a weather prediction feature to anticipate seasonal changes. Allow users to set seasonal preferences or implement adaptive algorithms. Power Supply Interruptions:</p> <p>Risk: Power interruptions may disrupt the system's operation, leading to potential harm to plants. Mitigation: Design the system to handle power interruptions gracefully, with features like backup power sources or the ability to resume operations after power is restored. User Understanding:</p> <p>Risk: Users may not fully understand the system's capabilities or may misconfigure watering settings. Mitigation: Provide clear and accessible user documentation, conduct user training sessions, and implement user-friendly interfaces to minimize the risk of misconfiguration. Connectivity Issues:</p> <p>Risk: Issues with the system's connectivity may hinder remote monitoring and control. Mitigation: Implement robust and secure connectivity solutions. Provide offline functionality and alerts to notify users of connectivity issues. Material Durability:</p> <p>Risk: Exposure to outdoor elements may impact the durability of the system's components. Mitigation: Choose materials that are resistant to weather conditions and conduct thorough testing for durability under different environmental scenarios. Data Security and Privacy:</p> <p>Risk: Concerns related to the security and privacy of user data, especially if the system involves data storage or remote monitoring. Mitigation: Implement strong data encryption, adhere to data protection regulations, and clearly communicate the system's privacy features to users. Budget Constraints:</p> <p>Risk: Unexpected expenses may arise, leading to budget overruns and potential delays. Mitigation: Conduct a thorough cost analysis, build in contingency funds, and regularly review the budget to identify and address potential overruns. Plant Health Monitoring:</p> <p>Risk: Inability to monitor overall plant health beyond soil moisture levels. Mitigation: Explore additional sensors or features for monitoring factors like sunlight exposure, temperature, and nutrient levels to provide a more comprehensive picture of plant health.</p> <p>No more than 5 pages. The shorter the better</p> <ol> <li> <p>Initial requirements gathering - Hey, what it is that you actually want</p> </li> <li> <p>Solution scoping and pricing - Depending on needs (p.1) you put statements of work. Initial offer.    Vary depending on the scope. Talk to key stakeholders and sponsor to understand goals. Migration, cost optimization,    upscaling? What we are working with and trying to achieve.</p> </li> <li> <p>Detailed solution design - Steps and tasks to perform. Take information and put together a solution design. How long    it's gonna take? What resources? What infrastructure is going to look like? What policies and standards? Naming    convetions, security, access management?</p> </li> <li> <p>Solution implementation - Hand over to other teams? Solve it yourself? Perform the implementation.</p> </li> <li> <p>Handover to operations - Then hand it over to operations with documentation, workshops, training and finally get a    sign off from sponsor.</p> </li> </ol> <p>You should definitely:</p> <ul> <li>research the industry, the current product, the technology and the competition</li> <li>find your approach / How do you try to differentiate yourselves in the market?</li> <li>find out the technical limitations</li> <li>wireframes of potential solutions</li> <li>A/B tests</li> <li>competitive overviews</li> <li>customer feedback</li> </ul>"},{"location":"usage/","title":"Plant Waterer Usage Documentation","text":"<p>Congratulations on your purchase of the SmartPlant Waterer! This easy-to-use device is designed to efficiently water your plants, keeping them healthy and vibrant. Please follow the simple steps below for proper usage:</p>"},{"location":"usage/#setup","title":"Setup","text":"<p>Unbox the SmartPlant Waterer and carefully remove all packaging materials. Place the waterer near the plant you wish to water, ensuring that it is positioned securely. </p>"},{"location":"usage/#power-on","title":"Power On","text":"<p>Check if the SmartPlant Waterer requires batteries or if it needs to be connected to a power source. Insert the batteries or connect the power source as per the device's specifications. Turn on the power switch.</p>"},{"location":"usage/#adjust-the-settings","title":"Adjust the Settings","text":"<p>The SmartPlant Waterer may have adjustable settings for watering frequency and duration. Refer to the user manual to understand the controls. Set the watering schedule based on your plant's needs. Consider factors such as plant type, size, and environmental conditions.</p>"},{"location":"usage/#fill-the-water-reservoir","title":"Fill the Water Reservoir","text":"<p>Depending on the model, the waterer may have a built-in reservoir or be connected to an external water source. Fill the water reservoir with clean, room-temperature water. Be sure not to overfill.</p>"},{"location":"usage/#positioning-the-watering-tube","title":"Positioning the Watering Tube","text":"<p>Connect the watering tube to the SmartPlant Waterer and position the tube near the base of the plant. Ensure that the tube reaches the soil and is not obstructed by any obstacles.</p>"},{"location":"usage/#testing","title":"Testing","text":"<p>Before leaving the SmartPlant Waterer unattended, conduct a test run to observe how the water is dispensed. Adjust settings if necessary.</p>"},{"location":"usage/#maintenance","title":"Maintenance","text":"<p>Regularly check the water level in the reservoir and refill as needed. Clean the watering tube periodically to prevent clogs and ensure a steady water flow. Inspect the device for any signs of damage or wear.</p>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues, consult the troubleshooting section in the user manual. Reach out to customer support if problems persist.</p>"},{"location":"usage/#power-off","title":"Power Off","text":"<p>When not in use, turn off the SmartPlant Waterer to conserve power and prevent unnecessary watering.</p>"},{"location":"usage/#enjoy-healthy-plants","title":"Enjoy Healthy Plants","text":"<p>Sit back and relax as your SmartPlant Waterer takes care of your plants. Enjoy the benefits of consistently well-hydrated and thriving greenery. For any additional information or assistance, refer to the comprehensive user manual provided with your SmartPlant Waterer. Happy gardening!</p>"}]}